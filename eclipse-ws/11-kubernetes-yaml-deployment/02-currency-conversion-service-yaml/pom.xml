<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ldeepak.microservices</groupId>
	<artifactId>currency-conversion-service</artifactId>
	<version>0.0.11-SNAPSHOT</version><!-- CHANGE-KUBERNETES -->
	<name>currency-conversion-service-kubernetes</name><!-- CHANGE-KUBERNETES -->
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2022.0.1</spring-cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<!-- CHANGE-KUBERNETES -->
		<!--
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		-->
		
		<!-- For Naming server -->
		<!-- CHANGE-KUBERNETES -->
		<!--
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		-->
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>
		
		<!-- Distributed Tracing-->
		
		<!-- Micrometer - Vendor-neutral application observability facade. 
		    Instrument your JVM-based application code without vendor lock-in.  
		    Observation (Metrics & Logs) + Tracing.
		-->
		<dependency>
		    <groupId>io.micrometer</groupId>
		    <artifactId>micrometer-observation</artifactId>
		</dependency>
		
		<!-- OPTION 1: Open Telemetry as Bridge (RECOMMENDED) -->
		<!-- Open Telemetry 
		    - Simplified Observability (metrics, logs, and traces) -->
		
		<dependency>
		    <groupId>io.micrometer</groupId>
		    <artifactId>micrometer-tracing-bridge-otel</artifactId>
		</dependency>
		
		<!--
		<dependency>
		    <groupId>io.opentelemetry</groupId>
		    <artifactId>opentelemetry-exporter-zipkin</artifactId>
		</dependency>
		-->
		
		<!-- Enables tracing of REST API calls made using Feign - V3 ONLY-->
		<dependency>
			<groupId>io.github.openfeign</groupId>
			<artifactId>feign-micrometer</artifactId>
		</dependency>

	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				
				<!-- Configuration for creating docker image with the given docker name -->
				<configuration>
					<image>
						<name>ldeepak/udemy-microservices-${project.artifactId}:${project.version}</name>
					</image>
					
					<!-- Whether to pull all the base policies all the time. We are pulling only when they are not present. -->
					<pullPolicy>IF_NOT_PRESENT</pullPolicy>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
