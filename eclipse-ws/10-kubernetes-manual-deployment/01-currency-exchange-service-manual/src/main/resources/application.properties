# Base version of currency exchange microservice. 
# Without spring cloud features like eureka naming server, API gateway ..etc
# We will use the services provided by Kubernetes

spring.application.name=currency-exchange
server.port=8000

#Enable SQL logging
spring.jpa.show-sql=true

#In memory database H2 connection
#Access h2 console at http://localhost:8000/h2-console
spring.datasource.url=jdbc:h2:mem:testdb

#For details present in Database
spring.h2.console.enabled=true

#By default data.sql file is executed first before table is created.
#This prevents this from happening. Queries should be allowed to execute only after tables are created first.
spring.jpa.defer-datasource-initialization=true

#Naming server
#eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#Specifying the number of retries for sample-api
resilience4j.retry.instances.sample-api.maxAttempts=5

#Duration between each retry
resilience4j.retry.instances.sample-api.waitDuration=1s

#Time between each subsequent retries takes longer 
resilience4j.retry.instances.sample-api.enableExponentialBackoff=true

#First run Zipkin distributed tracing server as docker container
#docker run -p 9411:9411 openzipkin/zipkin:2.23

#Distributed Tracing
#Access Zipkin Distributed Server at http://localhost:9411
management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

#Deploy to Google Cloud manually
#kubectl create deployment currency-exchange --image=ldeepak/udemy-microservices-currency-exchange-service:0.0.11-SNAPSHOT
#kubectl expose deployment currency-exchange --type=LoadBalancer --port=8000
#kubectl get svc, to get the External IP of the service.
#Execute the request on postman: http://External IP:8000/currency-exchange/from/USD/to/INR

## CHANGE-KUBERNETES
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true